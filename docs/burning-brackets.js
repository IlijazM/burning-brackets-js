(()=>{var e={699:()=>{Number.prototype.for=function(e,t=1){if(0!==t)if(t>0)for(let i=0;i<Math.abs(this);i+=t)e(i);else for(let i=0;i>-Math.abs(this);i+=t)e(i)}}},t={};function i(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,i),a.exports}(()=>{"use strict";try{window.typeOf=function(e){return null===e?"null":"function"==typeof e&&e.toString().startsWith("class")?"class":e instanceof Array?"array":typeof e}}catch(e){}let e={inputVariable:null,varName:null,not:{}};function t(t){e[t.name]=i=>{if(1==!t.condition(e.inputVariable,i))throw new Error(`Expected ${e.varName} ${t.getFailureMessage(i)}`)},e.not[t.name]=i=>{if(!0===t.condition(e.inputVariable,i))throw new Error(`Expected ${e.varName} not ${t.getFailureMessage(i)}`)}}t({name:"toEqual",condition:(e,t)=>e==t,getFailureMessage:e=>`to equal '${e}'`}),t({name:"toBe",condition:(e,t)=>e===t,getFailureMessage:e=>`to be '${e}'`}),t({name:"toBeNumber",condition:(e,t)=>"number"==typeof e,getFailureMessage:()=>"to be a number"}),t({name:"toBeInteger",condition:(e,t)=>Number.isInteger(e),getFailureMessage:()=>"to be an integer"}),t({name:"toBeFinite",condition:(e,t)=>Number.isFinite(e),getFailureMessage:()=>"to be finite"}),t({name:"toBeNaN",condition:(e,t)=>Number.isNaN(e),getFailureMessage:()=>"to be finite"}),t({name:"toBePositive",condition:(e,t)=>e>=0,getFailureMessage:()=>"to be positive"}),t({name:"toBeNegative",condition:(e,t)=>e<=0,getFailureMessage:()=>"to be positive"}),t({name:"toBeEven",condition:(e,t)=>e%2==0,getFailureMessage:()=>"to be even"}),t({name:"toBeOdd",condition:(e,t)=>e%2==1,getFailureMessage:()=>"to be odd"}),t({name:"toBeDivisibleWith",condition:(e,t)=>e%t==0,getFailureMessage:e=>`to be divisible with ${e}`}),t({name:"toBeString",condition:(e,t)=>"string"==typeof e,getFailureMessage:()=>"to be a string"}),t({name:"toStartWith",condition:(e,t)=>e.startsWith(t),getFailureMessage:e=>`to start with '${e}'`}),t({name:"toEndWith",condition:(e,t)=>e.endsWith(t),getFailureMessage:e=>`to end with '${e}'`}),t({name:"toIncludes",condition:(e,t)=>e.includes(t),getFailureMessage:e=>`to includes '${e}'`}),t({name:"toMatch",condition:(e,t)=>t.test(e),getFailureMessage:e=>`to match '${e}'`}),t({name:"toBeBoolean",condition:(e,t)=>"boolean"==typeof e,getFailureMessage:()=>"to be a boolean"}),t({name:"toBeTrue",condition:(e,t)=>!0===e,getFailureMessage:()=>"to be true"}),t({name:"toBeFalse",condition:(e,t)=>!1===e,getFailureMessage:()=>"to be false"}),t({name:"toBeTruthy",condition:(e,t)=>!!e,getFailureMessage:()=>"to be truthy"}),t({name:"toBeNull",condition:(e,t)=>null===e,getFailureMessage:()=>"to be null"}),t({name:"toBeUndefined",condition:(e,t)=>void 0===e,getFailureMessage:()=>"to be undefined"}),t({name:"toBeNullish",condition:(e,t)=>null==e,getFailureMessage:()=>"to be nullish"}),t({name:"toBeTheLength",condition:(e,t)=>e.length==t,getFailureMessage:e=>`to be the length of ${e}`});try{window.expect=function(t){const i=Object.keys(t);if("object"!=typeof t||i.length>1)e.inputVariable=t,e.varName="a variable";else{if(i.length<=0)throw new Error("Expected a variable. Got none");e.inputVariable=t[i[0]],e.varName=`'${i[0]}'`}return e}}catch(e){}i(699)})()})();