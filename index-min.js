let expectConditions={inputVariable:null,varName:null,not:{}};const expect=e=>{if("object"!=typeof e)throw new Error("Expected a variable as an object.");const t=Object.keys(e);if(t.length<=0)throw new Error("Expected a variable. Got none");return expectConditions.inputVariable=e[t[0]],expectConditions.varName=t[0],expectConditions};function addExpectCondition(e){if(null==e)throw new Error("Failed adding a condition. The condition must not be null.");if(["inputVariable","varName","not","either"].includes(e.name))throw new Error(`Failed adding a condition. The conditions name must not be ${e.name}.`);expectConditions[e.name]=(t=>{if(!0==!e.condition(expectConditions.inputVariable,t))throw new Error(`Expected ${expectConditions.varName} ${e.getFailureMessage(t)}`)}),expectConditions.not[e.name]=(t=>{if(!0===e.condition(expectConditions.inputVariable,t))throw new Error(`Expected ${expectConditions.varName} not ${e.getFailureMessage(t)}`)})}addExpectCondition({name:"toEqual",condition:(e,t)=>e==t,getFailureMessage:e=>`to equal '${e}'`}),addExpectCondition({name:"toStrictlyEqual",condition:(e,t)=>e===t,getFailureMessage:e=>`to strictly equal '${e}'`}),addExpectCondition({name:"toBe",condition:(e,t)=>e===t,getFailureMessage:e=>`to be '${e}'`}),addExpectCondition({name:"toBeNumber",condition:(e,t)=>"number"==typeof e,getFailureMessage:()=>"to be a number"}),addExpectCondition({name:"toBeString",condition:(e,t)=>"string"==typeof e,getFailureMessage:()=>"to be a string"}),addExpectCondition({name:"toBeBoolean",condition:(e,t)=>"boolean"==typeof e,getFailureMessage:()=>"to be a boolean"});try{module.expect=expect}catch(e){}