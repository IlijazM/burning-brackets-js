let expectConditions={inputVariable:null,varName:null,not:{}};const expect=e=>{if("object"!=typeof e)expectConditions.inputVariable=e,expectConditions.varName="a variable";else{const t=Object.keys(e);if(t.length<=0)throw new Error("Expected a variable. Got none");expectConditions.inputVariable=e[t[0]],expectConditions.varName=`'${t[0]}'`}return expectConditions};function addExpectCondition(e){if(null==e)throw new Error("Failed adding a condition. The condition must not be null.");if(["inputVariable","varName","not","either"].includes(e.name))throw new Error(`Failed adding a condition. The conditions name must not be ${e.name}.`);expectConditions[e.name]=(t=>{if(!0==!e.condition(expectConditions.inputVariable,t))throw new Error(`Expected ${expectConditions.varName} ${e.getFailureMessage(t)}`)}),expectConditions.not[e.name]=(t=>{if(!0===e.condition(expectConditions.inputVariable,t))throw new Error(`Expected ${expectConditions.varName} not ${e.getFailureMessage(t)}`)})}addExpectCondition({name:"toEqual",condition:(e,t)=>e==t,getFailureMessage:e=>`to equal '${e}'`}),addExpectCondition({name:"toStrictlyEqual",condition:(e,t)=>e===t,getFailureMessage:e=>`to strictly equal '${e}'`}),addExpectCondition({name:"toBe",condition:(e,t)=>e===t,getFailureMessage:e=>`to be '${e}'`}),addExpectCondition({name:"toBeNumber",condition:(e,t)=>"number"==typeof e,getFailureMessage:()=>"to be a number"}),addExpectCondition({name:"toBeInteger",condition:(e,t)=>Number.isInteger(e),getFailureMessage:()=>"to be an integer"}),addExpectCondition({name:"toBeFinite",condition:(e,t)=>Number.isFinite(e),getFailureMessage:()=>"to be finite"}),addExpectCondition({name:"toBeNaN",condition:(e,t)=>Number.isNaN(e),getFailureMessage:()=>"to be finite"}),addExpectCondition({name:"toBePositive",condition:(e,t)=>e>=0,getFailureMessage:()=>"to be positive"}),addExpectCondition({name:"toBeEvent",condition:(e,t)=>e%2==0,getFailureMessage:()=>"to be even"}),addExpectCondition({name:"toBeOdd",condition:(e,t)=>e%2==1,getFailureMessage:()=>"to be odd"}),addExpectCondition({name:"toBeDivisibleWith",condition:(e,t)=>e%t==0,getFailureMessage:e=>`to be divisible with ${e}`}),addExpectCondition({name:"toBeString",condition:(e,t)=>"string"==typeof e,getFailureMessage:()=>"to be a string"}),addExpectCondition({name:"toStartWith",condition:(e,t)=>e.startsWith(t),getFailureMessage:e=>`to start with '${e}'`}),addExpectCondition({name:"toEndWith",condition:(e,t)=>e.endsWith(t),getFailureMessage:e=>`to end with '${e}'`}),addExpectCondition({name:"toIncludes",condition:(e,t)=>e.includes(t),getFailureMessage:e=>`to includes '${e}'`}),addExpectCondition({name:"toMatch",condition:(e,t)=>t.test(e),getFailureMessage:e=>`to match '${e}'`}),addExpectCondition({name:"toBeBoolean",condition:(e,t)=>"boolean"==typeof e,getFailureMessage:()=>"to be a boolean"}),addExpectCondition({name:"toBeTrue",condition:(e,t)=>!0===e,getFailureMessage:()=>"to be true"}),addExpectCondition({name:"toBeFalse",condition:(e,t)=>!1===e,getFailureMessage:()=>"to be false"}),addExpectCondition({name:"toBeTruthy",condition:(e,t)=>!!e,getFailureMessage:()=>"to be truthy"}),addExpectCondition({name:"toBeNull",condition:(e,t)=>null===e,getFailureMessage:()=>"to be null"}),addExpectCondition({name:"toBeUndefined",condition:(e,t)=>void 0===e,getFailureMessage:()=>"to be undefined"}),addExpectCondition({name:"toBeNullish",condition:(e,t)=>null==e,getFailureMessage:()=>"to be nullish"});try{exports.expect=expect}catch(e){}function typeOf(e){return null===e?"null":"function"==typeof e&&e.toString().startsWith("class")?"class":e instanceof Array?"array":typeof e}try{exports.typeOf=typeOf}catch(e){}